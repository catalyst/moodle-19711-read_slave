{"version":3,"file":"edit_penalty_form.min.js","sources":["../src/edit_penalty_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles edit penalty form.\n *\n * @module     gradepenalty_duedate/edit_penalty_form\n * @copyright  2024 Catalyst IT\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as notification from 'core/notification';\nimport Fragment from 'core/fragment';\nimport Templates from 'core/templates';\n\n/**\n * Rule js class.\n */\nclass PenaltyRule {\n    constructor() {\n        this.overdueby = 0;\n        this.penalty = 0;\n    }\n}\n\n/**\n * Selectors\n */\nconst SELECTORS = {\n    FORM_CONTAINER: '#penalty_rule_form_container',\n    INSERT_BUTTON: '.insertbelow',\n    DELETE_BUTTON: '.deleterulebuttons',\n};\n\n/**\n * Register click event for delete and insert buttons.\n */\nconst registerEventListeners = () => {\n    // Find all delete buttons and add event listeners.\n    const deleteButtons = document.querySelectorAll(SELECTORS.DELETE_BUTTON);\n    deleteButtons.forEach(button => {\n        button.addEventListener('click', e => {\n            e.preventDefault();\n            deleteRule(e.target);\n        });\n    });\n\n    // Find all insert below buttons and add event listeners.\n    const insertBelowButtons = document.querySelectorAll(SELECTORS.INSERT_BUTTON);\n    insertBelowButtons.forEach(button => {\n        button.addEventListener('click', e => {\n            e.preventDefault();\n            insertRule(e.target);\n        });\n    });\n};\n\n/**\n * Delete a rule group.\n *\n * @param {Object} target\n */\nconst deleteRule = target => {\n    // Get all form data\n    let params = buildFormParams();\n\n    // Get the rule number from the name of clicked button.\n    let rulenumber = getRuleNumber(target);\n\n    // Remove the penalty rule.\n    let penaltyRules = JSON.parse(params.penaltyrules);\n    penaltyRules.splice(rulenumber, 1);\n    // Check if the lis is empty.\n    if (penaltyRules.length === 0) {\n        // Add an empty default penalty rule.\n        penaltyRules.push(new PenaltyRule());\n    }\n    penaltyRules = JSON.stringify(penaltyRules);\n    params.penaltyrules = penaltyRules;\n\n    loadPenaltyRuleForm(params.contextid, params);\n};\n\n/**\n * Insert a rule group below the clicked button.\n *\n * @param {Object} target\n */\nconst insertRule = target => {\n    // Get all form data\n    let params = buildFormParams();\n\n    // Get the rule number from the name of clicked button.\n    let rulenumber = getRuleNumber(target);\n\n    // Insert a new penalty rule.\n    let penaltyRule = new PenaltyRule();\n    let penaltyRules = JSON.parse(params.penaltyrules);\n    penaltyRules.splice(rulenumber + 1, 0, penaltyRule);\n    penaltyRules = JSON.stringify(penaltyRules);\n    params.penaltyrules = penaltyRules;\n\n    loadPenaltyRuleForm(params.contextid, params);\n};\n\n/**\n * Get rule number.\n *\n * @param {Object} target\n */\nconst getRuleNumber = target => {\n    let name = target.getAttribute('name');\n    let rulenumber = name.match(/\\d+/)[0];\n    return parseInt(rulenumber);\n};\n\n/**\n * Build form parameters for loading fragment.\n *\n * @return {Object} form params\n */\nconst buildFormParams = () => {\n    // Get the penalty rule form in its container.\n    let container = document.querySelector(SELECTORS.FORM_CONTAINER);\n    let form = container.querySelector('form');\n\n    // Get all form data\n    let formData = new FormData(form);\n\n    // Get context id.\n    let contextid = formData.get('contextid');\n\n    // Get group count.\n    let groupCount = formData.get('rulegroupcount');\n\n    // Create list of penalty rules.\n    let penaltyRules = [];\n\n    // Current penalty rules.\n    for (let i = 0; i < groupCount; i++) {\n        let penaltyRule = new PenaltyRule();\n        penaltyRule.overdueby = formData.get(`overdueby[${i}][number]`) * formData.get(`overdueby[${i}][timeunit]`);\n        penaltyRule.penalty = formData.get(`penalty[${i}]`);\n        penaltyRules.push(penaltyRule);\n    }\n\n    return {\n        contextid: contextid,\n        penaltyrules: JSON.stringify(penaltyRules),\n        finalpenaltyrule: formData.get('finalpenaltyrule'),\n    };\n};\n\n/**\n * Load the penalty rule form.\n *\n * @param {integer} contextid\n * @param {object} params\n */\nconst loadPenaltyRuleForm = (contextid, params) => {\n    Fragment.loadFragment('gradepenalty_duedate', 'penalty_rule_form', contextid, params)\n        .done((html, js) => {\n            // Replace the form with the new form.\n            let formContainer = document.querySelector(SELECTORS.FORM_CONTAINER);\n            Templates.replaceNodeContents(formContainer, html, js);\n        }).fail(notification.exception);\n};\n\n/**\n * Initialize the js.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["PenaltyRule","constructor","overdueby","penalty","SELECTORS","deleteRule","target","params","buildFormParams","rulenumber","getRuleNumber","penaltyRules","JSON","parse","penaltyrules","splice","length","push","stringify","loadPenaltyRuleForm","contextid","insertRule","penaltyRule","getAttribute","match","parseInt","form","document","querySelector","formData","FormData","get","groupCount","i","finalpenaltyrule","loadFragment","done","html","js","formContainer","replaceNodeContents","fail","notification","exception","querySelectorAll","forEach","button","addEventListener","e","preventDefault"],"mappings":";;;;;;;oHA8BMA,YACFC,mBACSC,UAAY,OACZC,QAAU,SAOjBC,yBACc,+BADdA,wBAEa,eAFbA,wBAGa,qBA+BbC,WAAaC,aAEXC,OAASC,kBAGTC,WAAaC,cAAcJ,QAG3BK,aAAeC,KAAKC,MAAMN,OAAOO,cACrCH,aAAaI,OAAON,WAAY,GAEJ,IAAxBE,aAAaK,QAEbL,aAAaM,KAAK,IAAIjB,aAE1BW,aAAeC,KAAKM,UAAUP,cAC9BJ,OAAOO,aAAeH,aAEtBQ,oBAAoBZ,OAAOa,UAAWb,SAQpCc,WAAaf,aAEXC,OAASC,kBAGTC,WAAaC,cAAcJ,QAG3BgB,YAAc,IAAItB,YAClBW,aAAeC,KAAKC,MAAMN,OAAOO,cACrCH,aAAaI,OAAON,WAAa,EAAG,EAAGa,aACvCX,aAAeC,KAAKM,UAAUP,cAC9BJ,OAAOO,aAAeH,aAEtBQ,oBAAoBZ,OAAOa,UAAWb,SAQpCG,cAAgBJ,aAEdG,WADOH,OAAOiB,aAAa,QACTC,MAAM,OAAO,UAC5BC,SAAShB,aAQdD,gBAAkB,SAGhBkB,KADYC,SAASC,cAAcxB,0BAClBwB,cAAc,QAG/BC,SAAW,IAAIC,SAASJ,MAGxBN,UAAYS,SAASE,IAAI,aAGzBC,WAAaH,SAASE,IAAI,kBAG1BpB,aAAe,OAGd,IAAIsB,EAAI,EAAGA,EAAID,WAAYC,IAAK,KAC7BX,YAAc,IAAItB,YACtBsB,YAAYpB,UAAY2B,SAASE,wBAAiBE,gBAAgBJ,SAASE,wBAAiBE,kBAC5FX,YAAYnB,QAAU0B,SAASE,sBAAeE,QAC9CtB,aAAaM,KAAKK,mBAGf,CACHF,UAAWA,UACXN,aAAcF,KAAKM,UAAUP,cAC7BuB,iBAAkBL,SAASE,IAAI,sBAUjCZ,oBAAsB,CAACC,UAAWb,4BAC3B4B,aAAa,uBAAwB,oBAAqBf,UAAWb,QACzE6B,MAAK,CAACC,KAAMC,UAELC,cAAgBZ,SAASC,cAAcxB,6CACjCoC,oBAAoBD,cAAeF,KAAMC,OACpDG,KAAKC,aAAaC,0BAMT,KApIMhB,SAASiB,iBAAiBxC,yBAClCyC,SAAQC,SAClBA,OAAOC,iBAAiB,SAASC,IAC7BA,EAAEC,iBACF5C,WAAW2C,EAAE1C,cAKMqB,SAASiB,iBAAiBxC,yBAClCyC,SAAQC,SACvBA,OAAOC,iBAAiB,SAASC,IAC7BA,EAAEC,iBACF5B,WAAW2B,EAAE1C"}