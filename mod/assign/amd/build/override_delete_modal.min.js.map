{"version":3,"file":"override_delete_modal.min.js","sources":["../src/override_delete_modal.js"],"sourcesContent":["import * as CustomEvents from 'core/custom_interaction_events';\nimport Modal from 'core/modal';\n\n// Custom modal.\nlet modal = null;\n\nconst SELECTORS = {\n    DELETE_BUTTONS: '.delete-override',\n    RECACULATION_CHECKBOX: '#recalculatepenalties',\n};\n\n/**\n * Custom Modal\n */\nexport default class OverrideDeleteModal extends Modal {\n    static TYPE = \"mod_assign/override_delete_modal\";\n    static TEMPLATE = \"mod_assign/override_delete_modal\";\n\n    /**\n     * Register the modal type.\n     * @param {string} confirmMessage The message to display in the modal.\n     * @param {boolean} showRecalculationCheckBox Whether to show the recalculation checkbox.\n     * @returns {Promise<void>}\n     */\n    static async init(confirmMessage, showRecalculationCheckBox) {\n        // Create the modal.\n        modal = await OverrideDeleteModal.create({\n            templateContext: {\n                confirmmessage: confirmMessage,\n                showpenaltyrecalculation: showRecalculationCheckBox,\n            },\n        });\n\n        // Add event listeners.\n        document.querySelectorAll(SELECTORS.DELETE_BUTTONS).forEach(button => {\n            button.addEventListener('click', async(event) => {\n                event.preventDefault();\n                modal.setOverrideId(button.getAttribute('data-overrideid'));\n                modal.setSessionKey(button.getAttribute('data-sesskey'));\n                modal.show();\n            });\n        });\n    }\n\n    /**\n     * Configure the modal.\n     *\n     * @param {Object} modalConfig\n     */\n    configure(modalConfig) {\n        // Add question modals are always large.\n        modalConfig.large = true;\n\n        // Always show on creation.\n        modalConfig.show = false;\n        modalConfig.removeOnClose = false;\n\n        // Apply standard configuration.\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Constructor.\n     * Set required data to null.\n     *\n     * @param {HTMLElement} root\n     */\n    constructor(root) {\n        super(root);\n\n        // Recalculate penalties checkbox.\n        this.recalculationCheckbox = this.getModal().find(SELECTORS.RECACULATION_CHECKBOX);\n\n        // Data.\n        this.setOverrideId(null);\n        this.setSessionKey(null);\n    }\n\n    /**\n     * Set the override id.\n     *\n     * @param {number} id The override id.\n     */\n    setOverrideId(id) {\n        this.overrideId = id;\n    }\n\n    /**\n     * Get the override id.\n     *\n     * @returns {*}\n     */\n    getOverrideId() {\n        return this.overrideId;\n    }\n\n    /**\n     * Set the session key.\n     *\n     * @param {string} key\n     */\n    setSessionKey(key) {\n        this.sessionKey = key;\n    }\n\n    /**\n     * Get the session key.\n     *\n     * @returns {*}\n     */\n    getSessionKey() {\n        return this.sessionKey;\n    }\n\n    /**\n     * Register events.\n     *\n     */\n    registerEventListeners() {\n        // Apply parent event listeners.\n        super.registerEventListeners(this);\n\n        // Register to close on cancel.\n        this.registerCloseOnCancel();\n\n        // Register the delete action.\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('delete'), () => {\n            this.deleteOverride();\n        });\n    }\n\n    /**\n     * Delete a override.\n     *\n     */\n    deleteOverride() {\n        // Check if the recalculation checkbox is checked.\n        const recalculate = this.recalculationCheckbox.prop('checked');\n\n        // Redirect to the delete URL.\n        window.location.href = M.cfg.wwwroot + '/mod/assign/overridedelete.php?id=' + this.getOverrideId() +\n            '&sesskey=' + this.getSessionKey() + '&confirm=1'\n            + (recalculate ? '&recalculate=1' : '');\n\n        // Hide the modal.\n        this.hide();\n    }\n\n    /**\n     * Reset the modal data when hiding.\n     *\n     */\n    hide() {\n        // Reset the data.\n        this.setOverrideId(null);\n        this.setSessionKey(null);\n\n        // Reset the recalculation checkbox.\n        this.recalculationCheckbox.prop('checked', false);\n\n        super.hide();\n    }\n}\n\nOverrideDeleteModal.registerModalType();\n"],"names":["modal","SELECTORS","OverrideDeleteModal","Modal","confirmMessage","showRecalculationCheckBox","create","templateContext","confirmmessage","showpenaltyrecalculation","document","querySelectorAll","forEach","button","addEventListener","async","event","preventDefault","setOverrideId","getAttribute","setSessionKey","show","configure","modalConfig","large","removeOnClose","constructor","root","recalculationCheckbox","this","getModal","find","id","overrideId","getOverrideId","key","sessionKey","getSessionKey","registerEventListeners","registerCloseOnCancel","on","CustomEvents","events","activate","getActionSelector","deleteOverride","recalculate","prop","window","location","href","M","cfg","wwwroot","hide","registerModalType"],"mappings":"63CAIIA,MAAQ,WAENC,yBACc,mBADdA,gCAEqB,8BAMNC,4BAA4BC,iCAU3BC,eAAgBC,2BAE9BL,YAAcE,oBAAoBI,OAAO,CACrCC,gBAAiB,CACbC,eAAgBJ,eAChBK,yBAA0BJ,6BAKlCK,SAASC,iBAAiBV,0BAA0BW,SAAQC,SACxDA,OAAOC,iBAAiB,SAASC,MAAAA,QAC7BC,MAAMC,iBACNjB,MAAMkB,cAAcL,OAAOM,aAAa,oBACxCnB,MAAMoB,cAAcP,OAAOM,aAAa,iBACxCnB,MAAMqB,aAUlBC,UAAUC,aAENA,YAAYC,OAAQ,EAGpBD,YAAYF,MAAO,EACnBE,YAAYE,eAAgB,QAGtBH,UAAUC,aASpBG,YAAYC,YACFA,WAGDC,sBAAwBC,KAAKC,WAAWC,KAAK9B,sCAG7CiB,cAAc,WACdE,cAAc,MAQvBF,cAAcc,SACLC,WAAaD,GAQtBE,uBACWL,KAAKI,WAQhBb,cAAce,UACLC,WAAaD,IAQtBE,uBACWR,KAAKO,WAOhBE,+BAEUA,uBAAuBT,WAGxBU,6BAGAT,WAAWU,GAAGC,aAAaC,OAAOC,SAAUd,KAAKe,kBAAkB,WAAW,UAC1EC,oBAQbA,uBAEUC,YAAcjB,KAAKD,sBAAsBmB,KAAK,WAGpDC,OAAOC,SAASC,KAAOC,EAAEC,IAAIC,QAAU,qCAAuCxB,KAAKK,gBAC/E,YAAcL,KAAKQ,gBAAkB,cAClCS,YAAc,iBAAmB,SAGnCQ,OAOTA,YAESpC,cAAc,WACdE,cAAc,WAGdQ,sBAAsBmB,KAAK,WAAW,SAErCO,oEAlJOpD,2BACH,oDADGA,+BAEC,oCAoJtBA,oBAAoBqD"}